stages:
  - build 
  - deploy
  - analysis
  - flushcache

variables:
  AWS_ACCESS_KEY_ID: $PROD_AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: $PROD_AWS_SECRET_ACCESS_KEY
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"

# reusable anchors
.set_build_version: &set_build_version
  export BUILD_VERSION=$(grep VITE_OUT_DIR .env | sed 's/VITE_OUT_DIR=dist\///')
.set_package_name: $set_package_name 
  export PACKAGE_NAME=$(grep PACKAGE_NAME .env | sed -n 's/^PACKAGE_NAME=//p' .env)

before_script:
  - apk add --no-cache git
  - apk add --no-cache python3 py3-pip
  - pip3 install awscli
  - apk add --no-cache openssh-client
  - eval $(ssh-agent -s)
  - echo "$GITLAB_SSH_TOKEN" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan git.ezyvet.com >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

build-static-assets:
  image: node:18-alpine3.16
  stage: build 
  script:
    - npm -g install pnpm@7
    - pnpm i
    - PACKAGE_VERSION=$(node -p "require('./package.json').version")
    - PACKAGE_NAME=$(node -p "require('./package.json').name")
    - export BUILD_VERSION=${PACKAGE_VERSION}-${CI_COMMIT_SHORT_SHA}
    - echo "VITE_OUT_DIR=dist/${BUILD_VERSION}" > .env
    - echo "PACKAGE_NAME=${PACKAGE_NAME}" >> .env
    - pnpm run build
    - cp .env dist/${BUILD_VERSION}
    - echo "Build DIR dist/${BUILD_VERSION}"
  artifacts:
    paths:
      - dist/${BUILD_VERSION}/*
      - .env
  only: 
    - main
    - branches

deploy-to-staging-and-trial:
  image: node:18-alpine3.16
  stage: deploy
  dependencies:
    - build-static-assets
  script:
    - *set_build_version
    - *set_package_name
    - AWS_ACCESS_KEY_ID=$TRIAL_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$TRIAL_AWS_SECRET_ACCESS_KEY aws s3 --region us-west-2 cp . "s3://assets.trial.ezyvet.com/${PACKAGE_NAME}/${BUILD_VERSION}" --recursive --acl private
    - AWS_ACCESS_KEY_ID=$STG_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$STG_AWS_SECRET_ACCESS_KEY aws s3 --region us-west-2 cp . "s3://assets.stg.ezyvet.com/${PACKAGE_NAME}/${BUILD_VERSION}" --recursive --acl private
    - cd dist
    - for item in $(ls -A ${BUILD_VERSION}); do if [ -f "${BUILD_VERSION}/$item" ]; then AWS_ACCESS_KEY_ID=$TRIAL_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$TRIAL_AWS_SECRET_ACCESS_KEY aws s3 --region us-west-2 cp "${BUILD_VERSION}/$item" "s3://assets.trial.ezyvet.com/${PACKAGE_NAME}/latest/$item" --acl private; fi; done
    - for item in $(ls -A ${BUILD_VERSION}); do if [ -f "${BUILD_VERSION}/$item" ]; then AWS_ACCESS_KEY_ID=$STG_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$STG_AWS_SECRET_ACCESS_KEY aws s3 --region us-west-2 cp "${BUILD_VERSION}/$item" "s3://assets.stg.ezyvet.com/${PACKAGE_NAME}/latest/$item" --acl private; fi; done
  only: 
    - branches


deploy-to-production:
  image: node:18-alpine3.16
  stage: deploy
  dependencies:
    - build-static-assets
  script:
    - *set_build_version
    - *set_package_name
    - cd dist
    - AWS_ACCESS_KEY_ID=$PROD_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$PROD_AWS_SECRET_ACCESS_KEY aws s3 --region us-west-2 cp . "s3://assets.ezyvet.com/${PACKAGE_NAME}/${BUILD_VERSION}/" --recursive --acl private
    - for item in $(ls -A ${BUILD_VERSION}); do if [ -f "${BUILD_VERSION}/$item" ]; then AWS_ACCESS_KEY_ID=$PROD_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$PROD_AWS_SECRET_ACCESS_KEY aws s3 --region us-west-2 cp "${BUILD_VERSION}/$item" "s3://assets.ezyvet.com/${PACKAGE_NAME}/latest/$item" --acl private; fi; done
  only: 
    - main


sonarcloud-check:
  stage: analysis
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner


.flushcloudfrontcaches:
  stage: flushcache
  only:
    - main
  script:
    - *set_package_name
    - aws cloudfront create-invalidation --distribution-id ${CF_DIST_ID} --paths "/${PACKAGE_NAME}/*"

flush-prod-cache:
  extends: .flushcloudfrontcaches
  variables:
    CF_DIST_ID: "E3RMPQ5BA1C8FU"

flush-trial-cache:
  extends: .flushcloudfrontcaches
  variables:
    AWS_ACCESS_KEY_ID: $TRIAL_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $TRIAL_AWS_SECRET_ACCESS_KEY
    CF_DIST_ID: "E19H25IR1CJJY2"

flush-stg-cache:
  extends: .flushcloudfrontcaches
  variables:
    AWS_ACCESS_KEY_ID: $STG_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $STG_AWS_SECRET_ACCESS_KEY
    CF_DIST_ID: "E3VDKF4XNQ5XKC"